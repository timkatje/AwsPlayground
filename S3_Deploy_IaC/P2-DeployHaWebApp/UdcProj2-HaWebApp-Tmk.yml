Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
  EnvName:
      Description: The environment name prefixed to all resources created by this template
      Type: String
      Default: UdcProj2

  IpCidrVpc: 
      Description: Enter the IP (CIDR) range for the VPC
      Type: String
      Default: 10.0.0.0/16

  IpCidrSubnetPub01: 
      Description: Enter the IP (CIDR) range for Public Subnet #1
      Type: String
      Default: 10.0.1.0/24

  IpCidrSubnetPub02: 
      Description: Enter the IP (CIDR) range for Public Subnet #2
      Type: String
      Default: 10.0.2.0/24

  IpCidrSubnetPvt01: 
      Description: Enter the IP (CIDR) range for Private Subnet #1
      Type: String
      Default: 10.0.3.0/24

  IpCidrSubnetPvt02: 
      Description: Enter the IP (CIDR) range for Private Subnet #2
      Type: String
      Default: 10.0.4.0/24

Resources:
  #instance profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2
  
  #         #!/bin/bash
  #         apt-get update -y
  #         apt-get install unzip awscli -y
  #         apt-get install apache2 -y
  #         systemctl start apache2.service
  #         cd /var/www/html
  #         aws s3 cp s3://udacity-demo-1/udacity.zip .
  #         unzip -o udacity.zip

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref IpCidrVpc
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref EnvName
  
  InetGw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvName

  InetGwAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InetGw
      VpcId: !Ref VPC
  
  SubnetPub01:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref IpCidrSubnetPub01
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Subnet (AZ1)
      VpcId: !Ref VPC
  
  SubnetPub02:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref IpCidrSubnetPub02
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Subnet (AZ2)
      VpcId: !Ref VPC
  
  SubnetPvt01:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref IpCidrSubnetPvt01
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private Subnet (AZ1)
      VpcId: !Ref VPC
  
  SubnetPvt02:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref IpCidrSubnetPvt02
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private Subnet (AZ2)
      VpcId: !Ref VPC

  EipNatGw01:
    Type: AWS::EC2::EIP
    DependsOn: InetGwAttach
    Properties:
      Domain: vpc

  EipNatGw02:
    Type: AWS::EC2::EIP
    DependsOn: InetGwAttach
    Properties:
      Domain: vpc

  NatGw01:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EipNatGw01.AllocationId
      SubnetId: !Ref SubnetPub01
  
  NatGw02:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EipNatGw02.AllocationId
      SubnetId: !Ref SubnetPub02

  RteTblPub:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvName} Public Routes

  DefRtePub: 
    Type: AWS::EC2::Route
    DependsOn: InetGwAttach
    Properties: 
      RouteTableId: !Ref RteTblPub
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InetGw

  RteTblAssocSubnetPub01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RteTblPub
      SubnetId: !Ref SubnetPub01

  RteTblAssocSubnetPub02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RteTblPub
      SubnetId: !Ref SubnetPub02

  # Define the security groups for the project
  SecGrpBastians: # Lock down this security group later
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow all traffic to Bastian hosts (in and out)
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  
  LnchCnfgBastians:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      # IamInstanceProfile: String
      ImageId: ami-08d489468314a58df
      InstanceType: t2.micro
      KeyName: aws-quickstarts
      LaunchConfigurationName: LC-UdcProj2-Bastians
      SecurityGroups: #Associate with public/bastian security group(s) later
        - Ref: SecGrpBastians
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum check-update -y
          sudo yum update -y
  
  LnchCnfgWebhosts:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true  #Disable when moving to Pvt subnets
      IamInstanceProfile: ProfileWithRolesForOurApp
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      ImageId: ami-005bdb005fb00e791
      InstanceType: t3.medium
      KeyName: aws-quickstarts
      LaunchConfigurationName: LC-UdcProj2-Webhosts
      SecurityGroups:
        - Ref: SecGrpBastians # Switch to Webhost-specific security group later
      UserData: # Script provided in final-project-starter.yml
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
  
  AutoScaleGroupBastions:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InetGwAttach
    Properties:
      AutoScalingGroupName: asg-UdcProj2-Bastians
      LaunchConfigurationName:
        Ref: LnchCnfgBastians
      MaxSize: '1'
      MinSize: '1'
      VPCZoneIdentifier:
        - !Ref SubnetPub01
        - !Ref SubnetPub02
      Tags: 
        - Key: Name
          Value: !Sub ${EnvName} Bastian hosts
          PropagateAtLaunch: 'true'

  AutoScaleGroupWebhosts: 
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InetGwAttach
    Properties:
      AutoScalingGroupName: asg-UdcProj2-Webhosts
      LaunchConfigurationName:
        Ref: LnchCnfgWebhosts
      MaxSize: '2'
      MinSize: '1'
      VPCZoneIdentifier:
        - !Ref SubnetPub01
        - !Ref SubnetPub02
      Tags: 
        - Key: Name
          Value: !Sub ${EnvName} Webhosts
          PropagateAtLaunch: 'true'

Outputs: 
  #Bonus points for useful outputs!
  VPC: 
    Description: A reference to the project's VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvName}-VPCID

  PublicSubnets:
    Description: List of all public subnets
    Value: !Join [ ",", [ !Ref SubnetPub01, !Ref SubnetPub02 ]]
    Export:
      Name: !Sub ${EnvName}-Subnets-Pub

  PublicSubnet1:
    Description: Public subnet in AZ1
    Value: !Ref SubnetPub01
    Export:
      Name: !Sub ${EnvName}-Subnet-Pub01

  PublicSubnet2: 
    Description: Public subnet in AZ2
    Value: !Ref SubnetPub02
    Export:
      Name: !Sub ${EnvName}-Subnet-Pub02

  PrivateSubnets:
    Description: List of all private subnets
    Value: !Join [ ",", [ !Ref SubnetPvt01, !Ref SubnetPvt02 ]]
    Export:
      Name: !Sub ${EnvName}-Subnets-Pvt

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref SubnetPvt01
    Export:
      Name: !Sub ${EnvName}-Subnet-Pvt01

  PrivateSubnet2: 
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref SubnetPvt02
    Export:
      Name: !Sub ${EnvName}-Subnet-Pvt02